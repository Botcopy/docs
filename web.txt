# Botcopy Feature Documentation

### Table of Contents

[Website Augmentation](#website-augmentation)
- [Botcopy Authorization Feature](#botcopy-authorization-feature)

---

## Website Augmentation

These are advanced features to augment your website with Botcopy

### Botcopy Authorization Feature

This allows you to use a window method to pass in parameters to your Dialogflow agent.

A Botcopy window method, `Botcopy.setCXParameters()`, lets you add custom CX parameters, change webhook headers, pass in webhook payloads, and more.

#### Why it's useful

Organizations in all categories and sectors benefit from this feature. It allows you to:
- Pass data from your front-end website to a Dialogflow CX agent with custom parameters
- Pass headers and payloads to a webhook to authenticate users and act on their behalf within your backend (i.e., handle refunds, change user information, file claims)
- Collect information like user timezone and geolocation

#### Instructions
`Botcopy.setCXParameters()` takes in an object as its parameter. The object is forwarded to Dialogflow CX with the next message the user sends.

The object follows the QueryParameters structure, referenced here:

https://cloud.google.com/dialogflow/cx/docs/reference/rest/v3beta1/QueryParameters

Payload and Parameters follow Google’s IStruct format, which looks like this:

```
{
  parameters: { fields: { **parameter-name**: { stringValue: "value" } } },
  payload: { fields: { **payload-variable**: { numberValue: 100 } } }
}
```

Full typing and parameter structure documentation can be found here:

https://googleapis.dev/nodejs/dialogflow-cx/latest/google.cloud.dialogflow.cx.v3beta1.IQueryParameters.html

Parameters sent with this method are CX session parameters. You can reference them in your agent with the following syntax:

`$session.params.**parameter-name**.`

#### Step by Step instructions

Authorization is an instrumental part of this feature. You can send a JWT (or any other authorization token) from your website to Dialogflow CX to act on your users’ behalf in your backend.

1) The Botcopy chat window will look for an incoming preset CX parameter named bcJWTRequired set equal to true.
 
2) When the Botcopy Chat Window sees { bcJWTRequired: true }, we will broadcast a Botcopy window event - { type: "bc-jwt-required" }, letting you know that the next operation will require authorization for the upcoming webhook.

3) When the window event is fired, you can call the window method, Botcopy.setCXParameters. In the case of a JWT, let’s make a webhook header with a (truncated) JWT value and a payload with some data we want to send to the webhook.

```
Botcopy.setCXParameters({
  webhookHeaders: { jwt: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..." },
  payload: {
    fields: { name: { stringValue: "Lisa" }, age: { numberValue: 32 } }
  }
});
```

When we reach a webhook we've configured in Dialogflow CX, the webhook request will have a new JWT header and send two new data pieces in the webhook request body: the name and age of the user chatting with the agent.